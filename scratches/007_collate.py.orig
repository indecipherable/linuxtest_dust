import mysql.connector
from mysql.connector import errorcode
import sys
import re
import os
from os import listdir
from os.path import isfile, join
from os import walk
from pprint import pprint as p
import glob

line_count = 0
# defines strip_end for project_dir
def strip_end(text, suffix):
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]
# enumerate where our project directories are
#print("DEBUG: sys.path is: %r" % sys.path)
py_wd=os.getcwd()
#print("DEBUG: thiscwd is: %r" % py_wd)
project_dir=strip_end(py_wd, "/pys")
#print("DEBUG: stripcwd is: %r" % project_dir)
q_dir=project_dir+"/questions/"
#print("DEBUG: q_dir is: %r" % q_dir)

def dumb_printer(a_line):
  print(a_line)


def find_question_files():
  f = []
  question_count = 0
  print("DEBUG: question_dir is: " + q_dir)
  this_glob=(q_dir+"*txt")
  print("DEBUG: this_glob is: " + this_glob)
  #print(glob.glob("/home/redmage/workspace/linuxtest_delta/questions/*txt"))
  # this should be dynamic, not hardcoded
  #g = glob.glob("/home/redmage/workspace/linuxtest_smoke/questions/*txt")
  g = glob.glob(this_glob)
  # i is a file in the glob of files
  for i in g:
    # question_count should give exact # of question files
    question_count = question_count + 1
    # select an arbitrary file to use
    if question_count == 10:
      print("DEBUG: arbitrary 10th file: " + i)
      with open(i) as f:
        content = f.readlines()
        for line in content:
          #print("DEBUG: line len: %r" % len(line.strip()))
          #if line not in ['\n', '\r\n']: 
          #if len(line.strip()) > 2:
            #print(line)
            #return line
          dumb_printer(line)
    else:
      pass
  print("DEBUG: question count: %s" % question_count)

#find_question_files()


def get_columns():
  a_list = []
  #column_count = 0
  columns_file = open("/tmp/cols.txt","w+")
  try:
    cnx = mysql.connector.connect(user='graymage', password='my_password',
                                  host='127.0.0.1', database='linuxquiztest')
  except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
      print("Something is wrong with your user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
      print("Database does not exist")
    else:
      print(err)
  else:
    cursor = cnx.cursor()
    cursor.execute("DESCRIBE questions;")
    my_columns = cursor.fetchall()
    cursor.close()
    return my_columns
  #for (a_column) in my_columns:
    #print(a_column)
    #a_list = a_list + a_column[0]
#    line_count = line_count + 1
    #column_count += 1
    #print("DEBUG: column_count: %r" % column_count)
  #for (a_column) in my_columns:
    #a_list += a_column
    #print("DEBUG: a list: %r" % a_list)
    #return a_column
    #columns_file.write(line + "\r\n")
    #dumb_printer(a_column)
#  print("DEBUG: line_count is: %s" % line_count)

#get_columns()
#print(my_columns)

def main():
  column_count = 0
  print("DEBUG: ")
  print("DEBUG: ")
  #find_question_files()
  #for i in get_columns():
  #  print(i)
  # get count of columns
  for a_column in get_columns():
    # debug to show column_count
    print(column_count)
    # increment
    column_count += 1
  # reset column_count for inserts
  # instantiate column_list with arbitrary number of columns
  print("DEBUG: Column_count is: %r" % column_count)
  column_list = [[]] * column_count
  column_count = 0
  print("DEBUG: column_list is: %r" % column_list)
  for a_column in get_columns():
    #print("DEBUG: Column_list is: %r" % column_list)
    #print("DEBUG: Column_count is: %r" % column_count)
    #print("DEBUG: a_column[0] is: %r" % a_column[0])
    # assign get_columns[index] to column_list[index]
    column_list[column_count] = a_column[0]
    # increment column_count
    column_count += 1
  print("DEBUG: Column_list[0] is: %r" % column_list[0])
  #print(column_list[1])
    #column_list = column_list + a_column[0]
  #print(column_list)
  #for a_line in find_question_files():
  #  print(type(a_line))
  #file_lines = find_question_files()
  #columns = get_columns()
#  for a_column in find_question_files() or []:
#    print(type(a_column))
# print(find_question_files())
# print(get_columns())
  #for line in find_question_files():
  #  print(line)
  #for line in get_columns():
  #  print(line)
#  my_file_lines = find_question_files()
#  for line in my_file_lines:
#    print("DEBUG: file_lines is: %r" % line)
#  my_db_columns = get_columns()
#  for column in my_db_columns:
#    print("DEBUG: columns is: %r" % column)

main()
