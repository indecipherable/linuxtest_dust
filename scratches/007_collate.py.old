import mysql.connector
from mysql.connector import errorcode
import sys
import re
import os
from os import listdir
from os.path import isfile, join
from os import walk
from pprint import pprint as p
import glob

# VARIABLES ASSIGNMENT BEGIN
# defines strip_end for project_dir
def strip_end(text, suffix):
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]
# enumerate where our project directories are
#print("DEBUG: sys.path is: %r" % sys.path)
py_wd=os.getcwd()
#print("DEBUG: thiscwd is: %r" % py_wd)
project_dir=strip_end(py_wd, "/pys")
#print("DEBUG: stripcwd is: %r" % project_dir)
q_dir=project_dir+"/questions/"
#print("DEBUG: q_dir is: %r" % q_dir)
# DEBUG: show properly parsed questions directory
#print("DEBUG: question_dir is: " + q_dir)
# Assign questions directory/*txt to this_glob
this_glob=(q_dir+"*txt")
# DEBUG: show glob
#print("DEBUG: this_glob is: " + this_glob)


def find_question_files():
  f = []
  question_count = 0
  #print(glob.glob("/home/redmage/workspace/linuxtest_delta/questions/*txt"))
  # this should be dynamic, not hardcoded
  #g = glob.glob("/home/redmage/workspace/linuxtest_smoke/questions/*txt")
  g = glob.glob(this_glob)
  # i is a file in the glob of files
  for i in g:
    # question_count should give exact # of question files
    question_count = question_count + 1
    # select an arbitrary file to use
    if question_count == 10:
#      print("DEBUG: arbitrary 10th file: " + i)
      with open(i) as f:
        content = f.readlines()
        for line in content:
          pass
          #print("DEBUG: line len: %r" % len(line.strip()))
          #if line not in ['\n', '\r\n']: 
          #if len(line.strip()) > 2:
            #print(line)
            #return line
    else:
      pass
  return (question_count, g)
#  print("DEBUG: question count: %s" % question_count)

def get_columns():
  ## begin SQL querying
  try:
    cnx = mysql.connector.connect(user='graymage', password='my_password',
                                  host='127.0.0.1', database='linuxquiztest')
  except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
      print("Something is wrong with your user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
      print("Database does not exist")
    else:
      print(err)
  else:
    cursor = cnx.cursor()
    cursor.execute("DESCRIBE questions;")
    my_columns = cursor.fetchall()
    cursor.close()
  ### end SQL querying
  ### begin assignment
  column_count = 0
  # for each column fetched to my_columns by cursor.fetchall()
  for a_column in my_columns:
    # debug to show column_count
    #print("DEBUG: column_count is: %r % column_count)
    # increment
    column_count += 1
  #return column_count
  # reset column_count for inserts
  # instantiate column_list with arbitrary number of columns
  #print("DEBUG: Column_count is: %r" % column_count)
  column_title_list = [[]] * column_count
  column_count = 0
  #print("DEBUG: column_list is: %r" % column_list)
  for a_column in my_columns:
    #print("DEBUG: Column_list is: %r" % column_list)
    #print("DEBUG: Column_count is: %r" % column_count)
    #print("DEBUG: a_column[0] is: %r" % a_column[0])
    # assign get_columns[index] to column_list[index]
    column_title_list[column_count] = a_column[0]
    print("DEBUG: a_column[1] is: %r" % a_column[1])
    print("DEBUG: a_column[2] is: %r" % a_column[2])
    print("DEBUG: a_column[3] is: %r" % a_column[3])
    print("DEBUG: a_column[4] is: %r" % a_column[4])
    # increment column_count
    column_count += 1
  return (column_count, column_title_list)

def database_insert(parsed_database,parsed_file):
  try:
    cnx = mysql.connector.connect(user='graymage', password='my_password',
                                  host='127.0.0.1', database='linuxquiztest')
  except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
      print("Something is wrong with your user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
      print("Database does not exist")
    else:
      print(err)
  else:
    cursor = cnx.cursor()
    #cursor.execute("INSERT INTO [table] (%s %s)")
    my_columns = cursor.fetchall()
    my_stmt = "INSERT INTO question (......) VALUES (......)"
    my_data = ["3", 'Is the sky green', 'no', 'yes']
    my_stmt = "INSERT INTO questions (q_id, question, answer, wrong) VALUES (%s, %s, %s, %s)"
    cursor.execute(my_stmt, my_data)
    #cursor.executemany(my_stmt, my_data)

def strip_front(text, prefix):
  if not text.startswith(prefix):
    return text
  else:
    return text[:len(text)-len(suffix)]      

# for each index, validate a line:
def input_validation(l, i):
  print("DEBUG: l, i are: %r %r" % (l, i))


def parse(columns,file_lines):
  index = 0
  for column in columns:
    print("DEBUG: column is: %r" % column)
  for line in file_lines:
    input_validation(line, index)
    print("DEBUG: line is: %r" % line)
    index += 1

# main() gets column_count, column_list from get_columns()
def main((column_count, column_list),(question_count, question_glob)):
  print("DEBUG: ")
  print("DEBUG: ")
  # DEBUG: show properly inherited column_count
  #print("DEBUG: Column_count is: %r" % column_count)
  # DEBUG: show properly indexed column_list
  #for i in range(0,column_count):
  #print("DEBUG: Column_list[i] is: %r" % column_list[i])
  #print("DEBUG: question_count is: %r" % question_count)
  #print("DEBUG: question_glob[10] is: %r" % question_glob[10])
  q10 = question_glob[10]
  q10_line_count = 0
  #print("DEBUG: q10 is: %r" % q10)
  # Operate on files in glob
#  for i in question_glob:
#    # DEBUG: enumerate items in glob
#    print("DEBUG: glob_file is: %r" % i)
  # DEBUG: i is an element of glob
  i=q10
  # Assume a file has 0 lines
  this_file_line_count = 0
  with open(i) as f:
    content = f.readlines()
    for line in content:
      # increment this_file_line_count per line
      this_file_line_count  += 1
      # DEBUG: print a line in content from file opened
      #print("DEBUG: line is: %r" % line)
    # this_file_line_count is given by above this_file_line_count
    q10_list = [[]] * this_file_line_count  
    #this_file_list = [] * this_file_line_count  
    # line_id is index of list
    line_id = 0
    for line in content:
      q10_list[line_id] = line
      # increment line_id per line
      line_id += 1
    # DEBUG: showing q10list is properly populated
    #print("DEBUG: q10list[3] is: %r" % q10_list[3])
      
  #print("DEBUG: q10_line_count is: %r" % q10_line_count)
  #parse(column_list,content)
  parse(column_list,content)
  
#main(get_columns())
main(get_columns(),find_question_files())
